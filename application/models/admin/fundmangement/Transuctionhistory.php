<?phpclass Transuctionhistory extends CI_Model {    function __construct() {        parent::__construct();    }    function check($permission) {        if ($this->Adminlogincheck->checkper($permission['transuctionhistory'])) {            return true;        } else {            redirect(site_url());            exit();        }    }    function load($permission, $mod) {        date_default_timezone_set("UTC");        $page = $this->uri->uri_to_assoc();        $title = $this->Adminforms->getdata("name", "usersubpage", $permission['transuctionhistory']);        if (isset($_GET['q'])) {            $q = $_GET['q'];        } else {            $q = false;        }        $this->db->select('*');        $this->db->from('webuser');        $this->db->where('webuser.webuser_type', '1');        $this->db->where('webuser.isactive', 1);        $this->db->where('webuser.isdelete', 0);        $query = $this->db->get();        $result = $query->result();        //getting the last_trans_date        $this->db->select('MAX(date) as last_trans_date');        $this->db->from('daily_hourly_transaction');        $query = $this->db->get();        $result = $query->row();        $last_trans_date = $result->last_trans_date;        //  var_dump($last_trans_date);die();        if ($last_trans_date == null) {            $last_trans_date = "2016-11-01";        }        $last_trans_date = date('Y-m-d', strtotime($last_trans_date . "+1 days"));        //var_dump($last_trans_date);die();        $current_date = date("Y-m-d");        $yesterday = date('Y-m-d', strtotime($current_date . "-1 day"));        //getting all the dates between the last trans and yesterday        $start = $last_trans_date;        $end = $yesterday; //end date        $dates = array();        $start = $current = strtotime($start);        $end = strtotime($end);        while ($current <= $end) {            $dates[] = date('Y-m-d', $current);            $current = strtotime('+1 days', $current);        }        $workdairy = array();        //var_dump($dates);die();        foreach ($dates as $date) {            $this->db->select('*,sum(total_hour) as total_time');            $this->db->from('job_workdairy');            $this->db->group_by('jobid,fuser_id');            $this->db->where("working_date ='{$date}'");            $this->db->join('job_bids', 'job_bids.job_id = job_workdairy.jobid', 'inner');            $this->db->where("job_bids.user_id = job_workdairy.fuser_id");            $this->db->where("job_bids.jobstatus = 0");            $query_payment = $this->db->get();            $list_dairy = $query_payment->result();            foreach ($list_dairy as $list) {                $workdairy[] = $list;                $this->db->select('contact_id');                $this->db->from('job_accepted');                $this->db->where('job_accepted.job_id =' . $list->jobid);                $this->db->where('job_accepted.fuser_id =' . $list->user_id);                $query = $this->db->get();                $contract = $query->row();                $amount = $list->total_time * $list->bid_amount;                $user_id = $list->cuser_id;                $chargeUser = chargePrimary($user_id, $amount);                //var_dump($chargeUser);die();                $this->db->select('*');                $this->db->from('billingmethodlist');                $this->db->where('billingmethodlist.belongsTo', $user_id);                $this->db->where('billingmethodlist.isPrimary', "1");                $resultMethods = $this->db->get()->result();                if (!empty($resultMethods)) {                    $resultMethods = $resultMethods[0];                    if ($chargeUser['status_code'] == 1) {                        $transdata['contract_id'] = $contract->contact_id;                        $transdata['fuser_id'] = $list->fuser_id;                        $transdata['cuser_id'] = $list->cuser_id;                        $transdata['trans_through'] = $resultMethods->paymentMethod;                        $transdata['transaction_id'] = $chargeUser['transaction_id'];                        $transdata['status'] = "Pending";                        $transdata['currency'] = "";                        $transdata['amount'] = $list->total_time * $list->bid_amount;                        $transdata['des'] = $list->total_time . 'hrs*$' . $list->bid_amount;                        $transdata['date'] = $date . ' 11:59:59';                        $this->db->insert('daily_hourly_invoice', $transdata);                        $user_data['isactive'] = 0;                        $this->db->where('webuser_id', $list->cuser_id);                         $this->db->update('webuser', $user_data);                    } else {                        $transdata['contract_id'] = $contract->contact_id;                        $transdata['fuser_id'] = $list->fuser_id;                        $transdata['cuser_id'] = $list->cuser_id;                        $transdata['trans_through'] = $resultMethods->paymentMethod;                        $transdata['transaction_id'] = $chargeUser['transaction_id'];                        $transdata['status'] = "Processed";                        $transdata['currency'] = "";                        $transdata['amount'] = $list->total_time * $list->bid_amount;                        $transdata['des'] = $list->total_time . 'hrs*$' . $list->bid_amount;                        $transdata['date'] = $date . ' 11:59:59';                        $this->db->insert('daily_hourly_transaction', $transdata);                    }                } else {                    $transdata['contract_id'] = $contract->contact_id;                    $transdata['fuser_id'] = $list->fuser_id;                    $transdata['cuser_id'] = $list->cuser_id;                    $transdata['trans_through'] = "not set";                    $transdata['transaction_id'] = "";                    $transdata['status'] = "Failed";                    $transdata['currency'] = "";                    $transdata['amount'] = $list->total_time * $list->bid_amount;                    $transdata['des'] = $list->total_time . 'hrs*$' . $list->bid_amount;                    $transdata['date'] = $date . ' 11:59:59';                    $this->db->insert('daily_hourly_invoice', $transdata);                     $user_data['isactive'] = 0;                     $user_data['suspend_reason'] = 1;                        $this->db->where('webuser_id', $list->cuser_id);                         $this->db->update('webuser', $user_data);                }            }        }        $data = array('title' => "Paid invoices", 'permission' => $permission, 'loadpage' => $page['loadpage'], 'subpage' => $page['subpage'], 'result' => $result,);        $this->Admintheme->loadview($page['loadpage'] . "/transuctionhistory", $data);    }    public function load_transaction($permission, $mod, $status){                date_default_timezone_set("UTC");        $page = $this->uri->uri_to_assoc();        $title = $this->Adminforms->getdata("name", "usersubpage", $permission['transuctionhistory']);                $from      = $this->input->get('from');        $to        = $this->input->get('to');        $user_type = $this->input->get('user_type');        $criteria  = $this->input->get('criteria');                        $fields = array(            'hourly_invoices_items.status',            'hourly_invoices_items.amount_due',            'hourly_invoices.service_name',            'hourly_invoices.transaction_id',            'hourly_invoices.updated_at',            'webuser.webuser_fname as employer_fname',            'webuser.webuser_lname as employer_lname',            'webuser.webuser_email as employer_email',            'webuserx.webuser_fname as freelancer_fname',            'webuserx.webuser_lname as freelancer_lname',            'webuserx.webuser_email as freelancer_email',            'job_bids.bid_amount',            'job_bids.offer_bid_amount',            'job_accepted.contact_id'        );                $this->db->select($fields)            ->from('hourly_invoices_items')            ->join('hourly_invoices', "hourly_invoices.id = hourly_invoices_items.invoice_id", 'inner')            ->join('job_accepted', "job_accepted.bid_id = hourly_invoices_items.bid_id", 'inner')            ->join('job_bids', "job_bids.id = hourly_invoices_items.bid_id", 'inner')            ->join('webuser', "webuser.webuser_id = job_accepted.buser_id", 'inner')            ->join('webuser as webuserx', "webuserx.webuser_id = job_accepted.fuser_id", 'inner')            ->where('hourly_invoices_items.status', $status);                if(!empty($criteria)){            switch($user_type){                case 1://ID                    $this->db->group_start();                    $this->db->or_where(array("transaction_id" => $criteria, "contact_id" => $criteria));                    $this->db->group_end();                break;                case 2://Email                    $this->db->group_start();                    $this->db->or_like(array("webuser.webuser_email" => $criteria, "webuserx.webuser_email" => $criteria));                    $this->db->group_end();                break;                case 3://Username                    $this->db->group_start();                    $this->db->or_like(array(                        "webuser.webuser_fname"   => $criteria,                         "webuser.webuser_lname"   => $criteria,                        "webuserx.webuser_fname" => $criteria,                         "webuserx.webuser_lname" => $criteria,                    ));                    $this->db->group_end();                break;            }        }                if(!empty($from))            $this->db->where('hourly_invoices.updated_at >=', date('Y-m-d 00:00:00', strtotime($from)));                  if(!empty($to))            $this->db->where('hourly_invoices.updated_at <=', date('Y-m-d 00:00:00', strtotime($to)));                $query = $this->db->order_by('hourly_invoices.updated_at')->get();                        $data = array(            'title'      => 'Paid invoices',             'permission' => $permission,             'loadpage'   => $page['loadpage'],             'subpage'    => $page['subpage'],             'txns'       => $query->result(),            'from'       => $from,            'to'         => $to,            'user_type'  => $user_type,            'criteria'   => $criteria,        );        $this->Admintheme->loadview($page['loadpage'] . "/transuctionhistory", $data);    }}