<?phpclass Invoicehourly extends CI_Model {    function __construct() {        parent::__construct();    }    function check($permission) {        if ($this->Adminlogincheck->checkper($permission['invoicehourly'])) {            return true;        } else {            redirect(site_url());            exit();        }    }    function load($permission, $mod) {        $page = $this->uri->uri_to_assoc();        $title = $this->Adminforms->getdata("name", "usersubpage", $permission['invoicehourly']);        if (isset($_GET['q'])) {            $q = $_GET['q'];        } else {            $q = false;        }        $this->db->select('*');        $this->db->from('webuser');        $this->db->where('webuser.webuser_type', '1');        $this->db->where('webuser.isactive', 1);        $this->db->where('webuser.isdelete', 0);        $query = $this->db->get();        $result = $query->result();        $this->db->select('*');        $this->db->from('daily_hourly_invoice');        $query = $this->db->get();        $workdairy = $query->result();        $this->db->select('*');        $this->db->from('billingmethodlist');        $this->db->where('billingmethodlist.belongsTo', $user_id);        $this->db->where('billingmethodlist.isPrimary', "1");        $resultMethods = $this->db->get()->result();        foreach ($workdairy as $failedInvoice) {            $chargeUser = chargePrimary($user_id, $amount);            if ($chargeUser['status_code'] == 1) {                //doing nothing            } else {                $transdata['contract_id'] = $failedInvoice->contract_id;                $transdata['fuser_id'] = $failedInvoice->fuser_id;                $transdata['cuser_id'] = $failedInvoice->cuser_id;                $transdata['trans_through'] = $resultMethods->paymentMethod;                $transdata['transaction_id'] = $chargeUser['transaction_id'];                $transdata['status'] = "Processed";                $transdata['currency'] = "";                $transdata['amount'] = $failedInvoice->amount;                $transdata['des'] = $failedInvoice->des;                $transdata['date'] = $failedInvoice->date;                $this->db->insert('daily_hourly_transaction', $transdata);                $this->db->where('id_daily_hourly_invoice', $failedInvoice->id_daily_hourly_invoice);                $this->db->delete('daily_hourly_invoice');                                //check if this user has more failed invoices                $this->db->select('*');                $this->db->from('daily_hourly_invoice');                $this->db->where('cuser_id', $failedInvoice->cuser_id);                $query = $this->db->get();                $suspendids = $query->result();                if (empty($suspendids)) {                    $user_data['isactive'] = 1;                    $user_data['suspend_reason'] = 0;                    $this->db->where('webuser_id', $failedInvoice->cuser_id);                    $this->db->update('webuser', $user_data);                }            }        }        $data = array('title' => $title, 'permission' => $permission, 'loadpage' => $page['loadpage'], 'subpage' => $page['subpage'], 'result' => $result,);        $this->Admintheme->loadview($page['loadpage'] . "/" . $page['subpage'], $data);    }        public function load_transaction($permission, $mod, $status){                date_default_timezone_set("UTC");        $page = $this->uri->uri_to_assoc();        $title = $this->Adminforms->getdata("name", "usersubpage", $permission['transuctionhistory']);                /*$fixed_fields = array(            "payments.payment_create as updated_at",            "jobs.title",            "payments.des",            "webuser.webuser_fname as employer_fname",            "webuser.webuser_lname as employer_lname",            "webuser.webuser_email as employer_email",            'webuserx.webuser_fname as freelancer_fname',            'webuserx.webuser_lname as freelancer_lname',            'webuserx.webuser_email as freelancer_email',            "payments.payment_gross ",        );*/                $fields = array(            'hourly_invoices_items.status',            'hourly_invoices_items.amount_due',            'hourly_invoices.service_name',            'hourly_invoices.transaction_id',            'hourly_invoices.updated_at',            'webuser.webuser_fname as employer_fname',            'webuser.webuser_lname as employer_lname',            'webuser.webuser_email as employer_email',            'webuserx.webuser_fname as freelancer_fname',            'webuserx.webuser_lname as freelancer_lname',            'webuserx.webuser_email as freelancer_email',            'job_bids.bid_amount',            'job_bids.offer_bid_amount',            'job_accepted.contact_id'        );                $query = $this->db->select($fields)                    ->from('hourly_invoices_items')                    ->join('hourly_invoices', "hourly_invoices.id = hourly_invoices_items.invoice_id", 'inner')                    ->join('job_accepted', "job_accepted.bid_id = hourly_invoices_items.bid_id", 'inner')                    ->join('job_bids', "job_bids.id = hourly_invoices_items.bid_id", 'inner')                    ->join('webuser', "webuser.webuser_id = job_accepted.buser_id", 'inner')                    ->join('webuser as webuserx', "webuserx.webuser_id = job_accepted.fuser_id", 'inner')                    ->where('hourly_invoices_items.status', $status)                    ->order_by('hourly_invoices.updated_at')                    ->get();                $data = array(            'title'      => $title,             'permission' => $permission,             'loadpage'   => $page['loadpage'],             'subpage'    => $page['subpage'],             'txns'       => $query->result(),        );        $this->Admintheme->loadview($page['loadpage'] . "/" . $page['subpage'], $data);    }}?>